koji problemi se mogu javiti kod visenitnog izvrsavanja floyd warshall algoritma?

Kod višeslojnih (višenitnih) izvršavanja **Floyd-Warshall algoritma**, koji se koristi za pronalaženje najkraćih puteva između svih parova čvorova u grafu, mogu se javiti određeni problemi. Evo glavnih izazova i problema koji se mogu pojaviti:

### 1. **Problem sinhronizacije (Race Conditions)**:
   - Floyd-Warshall algoritam koristi **trostruku petlju** kako bi ažurirao matricu rastojanja (ili težina) između čvorova. Kada se paralelizuju spoljašnje ili unutrašnje petlje, više niti istovremeno pokušava da ažurira istu matricu podataka.
   - **Race condition** se javlja kada dve ili više niti paralelno pristupaju i ažuriraju iste ćelije matrice bez adekvatne sinhronizacije, što može dovesti do nekonzistentnih ili netačnih rezultata.
   
   **Rešenje**: Potrebna je pažljiva kontrola pristupa zajedničkoj memoriji, npr. putem **zaključavanja (locks)** ili korišćenjem **atomskih operacija**, kako bi se osigurala pravilna sinhronizacija.

### 2. **Overhead sinhronizacije**:
   - Iako je sinhronizacija potrebna da bi se sprečili race conditions, previše zaključavanja ili barijera može stvoriti značajan **overhead**. To usporava ukupnu brzinu algoritma jer niti čekaju jedna drugu pre nego što mogu da nastave sa radom.
   
   **Rešenje**: Koristiti **grubozrnaste (coarse-grained) tehnike sinhronizacije**, gde se zaključava veći blok podataka, umesto sitnozrnatih (fine-grained) tehnika koje zaključavaju pojedinačne elemente, ili pažljivo podeliti zadatke između niti kako bi se smanjila potreba za sinhronizacijom.

### 3. **Nepravilna podela posla (Load Imbalance)**:
   - U algoritmu kao što je Floyd-Warshall, svaka iteracija zavisi od prethodnih ažuriranja matrice, što može otežati ravnomernu podelu posla među nitima. Ako neki delovi matrice zahtevaju više računske moći od drugih, neke niti mogu završiti svoj posao ranije i ostati neaktivne dok druge niti još rade.
   
   **Rešenje**: Koristiti dinamičko balansiranje posla ili prilagoditi podelu podataka tako da svaki deo matrice koji niti obrađuju bude približno jednakog opterećenja.

### 4. **Zavisan redosled izvršavanja (Dependency Issues)**:
   - Floyd-Warshall algoritam ima **zavisnosti između iteracija**, jer trenutni rezultat iteracije zavisi od prethodno izračunatih vrednosti. Ako se niti ne izvršavaju u pravilnom redosledu, može doći do toga da nit koristi neažurirane podatke iz prethodne iteracije.
   
   **Rešenje**: Obezbediti pravilno usmeravanje zavisnosti između iteracija, na primer, postavljanjem **barijera** na kraju svake spoljne petlje, kako bi se osiguralo da sve niti završe prethodnu iteraciju pre nego što pređu na sledeću.

### 5. **Ograničena paralelizacija**:
   - Iako je moguće paralelizovati unutrašnje petlje Floyd-Warshall algoritma, postoje ograničenja u smislu koliko se može paralelizovati. Zavisnosti između iteracija ograničavaju paralelizaciju, posebno kada je reč o velikim matricama gde mnogo podataka mora biti ažurirano na osnovu prethodnih vrednosti.
   
   **Rešenje**: Fokusirati se na paralelizaciju unutrašnjih petlji ili na druge tehnike optimizacije, poput **blokovske paralelizacije**, gde se matrica deli na manje podmatrice koje se obrađuju paralelno.

### 6. **Keš koherentnost i pristup memoriji (Cache Coherence)**:
   - Ako različite niti rade na ažuriranju različitih delova matrice, mogu nastati problemi sa **keš koherentnošću**, gde keš memorija ne uspeva da se sinhronizuje između jezgara, što dovodi do neispravnih podataka.
   - Takođe, paralelno ažuriranje velike matrice može stvoriti **memorijske uska grla** kada više niti pokušava da pristupi istim lokacijama u memoriji.
   
   **Rešenje**: Strateški podeliti matricu i pristup memoriji kako bi se minimizovala mogućnost sukoba u kešu i povećala efikasnost pristupa memoriji.

### 7. **Overhead usled kreiranja niti**:
   - Paralelizacija može doneti dodatni **overhead** zbog kreiranja i održavanja niti, naročito ako je broj niti prevelik u poređenju sa brojem dostupnih jezgara procesora.
   
   **Rešenje**: Optimizovati broj niti u odnosu na broj jezgara procesora, kako bi se smanjio overhead upravljanja nitima.

### Zaključak:
Višenitno izvršavanje Floyd-Warshall algoritma može dovesti do problema sa sinhronizacijom, nepravilnom podelom posla, zavisnostima između iteracija, kao i sa kešom i memorijskim pristupom. Da bi se postigla efikasna paralelizacija, potrebno je pažljivo upravljati sinhronizacijom, podelom posla, i minimizirati overhead.